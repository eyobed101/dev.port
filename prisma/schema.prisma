generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  emailVerified Boolean        @default(false)
  image         String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sessions      Session[]
  accounts      Account[]
  portfolios    Portfolio[]
  blogPosts     BlogPost[]
  testimonials  Testimonial[]
  media         Media[]  

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Portfolio {
  id          String      @id @default(uuid())
  title       String
  slug        String      @unique
  description String?
  content     String      @db.Text
  featured    Boolean     @default(false)
  imageUrl    String?
  videoUrl    String?
  tags        Tag[]
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  skills      Skill[]
  client      String?
  projectUrl  String?
  sourceUrl   String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String

  @@map("portfolios")
}

model BlogPost {
  id          String      @id @default(uuid())
  title       String
  slug        String      @unique
  excerpt     String?
  content     String      @db.Text
  featured    Boolean     @default(false)
  imageUrl    String?
  published   Boolean     @default(false)
  publishedAt DateTime?
  tags        Tag[]
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]

  @@map("blog_posts")
}

model Category {
  id          String      @id @default(uuid())
  name        String
  slug        String      @unique
  description String?
  portfolios  Portfolio[]
  blogPosts   BlogPost[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("categories")
}

model Tag {
  id          String      @id @default(uuid())
  name        String
  slug        String      @unique
  description String?
  portfolios  Portfolio[]
  blogPosts   BlogPost[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("tags")
}

model Skill {
  id          String      @id @default(uuid())
  name        String
  slug        String      @unique
  level       Int         @default(1)
  description String?
  icon        String?
  portfolios  Portfolio[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("skills")
}

model Testimonial {
  id          String      @id @default(uuid())
  name        String
  title       String
  content     String      @db.Text
  imageUrl    String?
  rating      Int         @default(5)
  approved    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?

  @@map("testimonials")
}

model Comment {
  id          String      @id @default(uuid())
  name        String
  email       String
  content     String      @db.Text
  approved    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  post        BlogPost    @relation(fields: [postId], references: [id])
  postId      String
  parent      Comment?    @relation(name: "CommentReplies", fields: [parentId], references: [id])
  parentId    String?
  replies     Comment[]   @relation(name: "CommentReplies")

  @@map("comments")
}

model Media {
  id          String      @id @default(uuid())
  name        String
  url         String
  type        MediaType
  size        Int
  width       Int?
  height      Int?
  altText     String?
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      String

  @@map("media")
}

enum Role {
  USER
  EDITOR
  ADMIN
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}